# -*- coding: utf-8 -*-
"""Untitled40.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P0QJt7vBr_wr31Irgo8S5hcTp_9mHdJv
"""

# ======= Cell 1: install libs (run once) =======
!pip install -q transformers datasets evaluate accelerate sentencepiece
!pip install -q git+https://github.com/huggingface/peft.git  # optional: LoRA support if you want later

!pip install -q \
  numpy==1.26.4 \
  transformers==4.37.2 \
  accelerate==0.28.0 \
  timm \
  einops \
  decord \
  datasets==2.19.1 \
  moviepy==1.0.3 \
  peft==0.10.0 \
  opencv-python==4.7.0.72 \
  sentence-transformers==2.6.1 \
  tokenizers==0.15.2 \
  huggingface_hub==0.33.5

# Upgrade pip
!pip install -q --upgrade pip

# Install latest compatible versions (no strict pinning to avoid conflicts)
!pip install -q transformers datasets evaluate accelerate sentencepiece

# =========================================
# 2Ô∏è‚É£ Imports
# =========================================
import torch
import numpy as np
from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
import evaluate

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

# =========================================
# 3Ô∏è‚É£ Configurations
# =========================================
MODEL = "microsoft/deberta-v3-small"   # Fast but accurate
DATASET_NAME = "glue"
DATASET_CONFIG = "sst2"

# =========================================
# 4Ô∏è‚É£ Load Dataset
# =========================================
raw_datasets = load_dataset(DATASET_NAME, DATASET_CONFIG)

# Optional: For faster training in testing phase, uncomment below
# raw_datasets["train"] = raw_datasets["train"].shuffle(seed=42).select(range(30000))

# =========================================
# 5Ô∏è‚É£ Tokenization
# =========================================
tokenizer = AutoTokenizer.from_pretrained(MODEL, use_fast=True)

def preprocess(examples):
    return tokenizer(examples["sentence"], truncation=True, max_length=128)

tokenized = raw_datasets.map(preprocess, batched=True)

# =========================================
# 6Ô∏è‚É£ Load Model
# =========================================
model = AutoModelForSequenceClassification.from_pretrained(MODEL, num_labels=2).to(device)

!pip install -q --upgrade datasets evaluate

# =========================================
# 7Ô∏è‚É£ Metrics Function
# =========================================
metric = evaluate.load("accuracy")

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = np.argmax(logits, axis=-1)
    return metric.compute(predictions=preds, references=labels)

# =========================================
# 8Ô∏è‚É£ Training Arguments
# =========================================
training_args = TrainingArguments(
    output_dir="sentiment_model_gpu",
    evaluation_strategy="epoch",
    save_strategy="epoch",
    per_device_train_batch_size=32,
    per_device_eval_batch_size=64,
    num_train_epochs=3,
    learning_rate=2e-5,
    weight_decay=0.01,
    fp16=True,  # Mixed precision for speed
    logging_steps=50,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy",
    save_total_limit=2
)

# =========================================
# 9Ô∏è‚É£ Trainer Setup
# =========================================
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized["train"],
    eval_dataset=tokenized["validation"],
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

# =========================================
# üîü Train the Model
# =========================================
trainer.train()

# =========================================
# 1Ô∏è‚É£1Ô∏è‚É£ Evaluate the Model
# =========================================
results = trainer.evaluate()
print(f"Validation Accuracy: {results['eval_accuracy']*100:.2f}%")

# =========================================
# 1Ô∏è‚É£2Ô∏è‚É£ Inference Example
# =========================================
def predict(texts):
    enc = tokenizer(texts, truncation=True, padding=True, return_tensors="pt").to(device)
    with torch.no_grad():
        logits = model(**enc).logits
    preds = torch.argmax(logits, dim=-1).cpu().numpy()
    return ["positive" if p == 1 else "negative" for p in preds]

sample_texts = [
    "I absolutely loved this movie, it was fantastic!",
    "The plot was boring and predictable."
]
print("\nPredictions:", predict(sample_texts))

model.save_pretrained("./sentiment_model")
tokenizer.save_pretrained("./sentiment_model")

from transformers import pipeline

# Load fine-tuned model
sentiment_model = pipeline(
    "text-classification",
    model="/content/sentiment_model",
    tokenizer="/content/sentiment_model"
)

# Map labels to readable names
label_map = {
    "LABEL_0": "Negative",
    "LABEL_1": "Positive"
}

while True:
    text = input("Enter text (or 'quit' to exit): ")
    if text.lower() == "quit":
        break
    result = sentiment_model(text)[0]
    label = label_map.get(result['label'], result['label'])  # fallback in case label not found
    print(f"Sentiment: {label} (score: {result['score']:.2f})")